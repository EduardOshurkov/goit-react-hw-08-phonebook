{"version":3,"file":"static/js/116.e832bedf.chunk.js","mappings":"0LAGO,IAAMA,EAAe,CACxBC,KAAM,GACNC,MAAO,GACPC,SAAU,I,UCLd,GAAgB,MAAQ,4BAA4B,KAAO,2BAA2B,SAAW,+BAA+B,MAAQ,4BAA4B,YAAc,kCAAkC,cAAgB,oCAAoC,SAAW,+BAA+B,SAAW,+BAA+B,aAAe,oC,SCgC3W,EA7BqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,GAA8CC,EAAAA,EAAAA,GAAQ,CAAEL,aAAAA,EAAcI,SAAAA,IAA9DE,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAErBP,EAA0BK,EAA1BL,KAAMC,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SAErB,OACI,gBAAKM,UAAWC,EAAAA,aAAhB,UACI,kBAAMD,UAAWC,EAAAA,KAAaC,OAAO,GAAGP,SAAUI,EAAlD,WACI,eAAIC,UAAWC,EAAAA,MAAf,uBACA,iBAAKD,UAAWC,EAAAA,SAAhB,WACJ,iBAAKD,UAAWC,EAAAA,SAAhB,WACI,kBAAOD,UAAWC,EAAAA,MAAcE,QAAQ,GAAxC,mBACA,kBAAOH,UAAWC,EAAAA,cAAsBG,MAAOZ,EAAMA,KAAK,OAAOa,SAAUP,EAAcQ,KAAK,OAAOC,YAAY,YAAYC,UAAQ,QAEzI,iBAAKR,UAAWC,EAAAA,SAAhB,WACI,kBAAOD,UAAWC,EAAAA,MAAcE,QAAQ,GAAxC,oBACA,kBAAOH,UAAWC,EAAAA,cAAsBG,MAAOX,EAAOD,KAAK,QAAQa,SAAUP,EAAcQ,KAAK,QAAQC,YAAY,QAAQC,UAAQ,QAExI,iBAAKR,UAAWC,EAAAA,aAAhB,WACI,kBAAOD,UAAWC,EAAAA,MAAcE,QAAQ,GAAxC,uBACA,kBAAOH,UAAWC,EAAAA,cAAsBG,MAAOV,EAAUF,KAAK,WAAWa,SAAUP,EAAcQ,KAAK,WAAWC,YAAY,WAAWC,UAAQ,QAEhJ,mBAAQR,UAAWC,EAAAA,YAAoBK,KAAK,SAA5C,+B,kDCGhB,EArBqB,WACjB,IAAMG,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAAvBF,OAOR,OANgBG,EAAAA,EAAAA,MAOL,SAAC,KAAD,CAAUC,GAAG,eAIpB,4BACI,SAAC,EAAD,CAAcpB,SAVH,SAACqB,GAChBP,GAASQ,EAAAA,EAAAA,IAAOD,OAUXL,IAAU,sC,gECDvB,IArBgB,SAAC,GAA8B,IAA7BpB,EAA4B,EAA5BA,aAAcI,EAAc,EAAdA,SAC5B,GAA0BuB,EAAAA,EAAAA,WAAS,UAAI3B,IAAvC,eAAOM,EAAP,KAAcsB,EAAd,KAiBA,MAAO,CAACtB,MAAAA,EAAOsB,SAAAA,EAAUrB,aAfJ,SAAC,GAAc,IAAbsB,EAAY,EAAZA,OACX5B,EAA+B4B,EAA/B5B,KAAMY,EAAyBgB,EAAzBhB,MAAOE,EAAkBc,EAAlBd,KAAMe,EAAYD,EAAZC,QACrBC,EAAqB,aAAThB,EAAuBe,EAAUjB,EACnDe,GAAS,SAAAI,GAAS,yBACXA,GADW,cAEb/B,EAAO8B,QAUuBvB,aANlB,SAACyB,GAClBA,EAAEC,iBACF9B,GAAS,UAAIE,IACbsB,GAAS,UAAI5B","sources":["Modules/RegisterForm/initialstate.jsx","webpack://goit-react-hw-08-phonebook/./src/Modules/RegisterForm/RegisterForm.module.css?e7d0","Modules/RegisterForm/RegisterForm.jsx","Pages/RegisterPage/RegisterPage.jsx","hooks/useForm.js"],"sourcesContent":["\n\n\nexport const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"RegisterForm_label__41Tlu\",\"form\":\"RegisterForm_form__iPbga\",\"wrapForm\":\"RegisterForm_wrapForm__Z+Xxu\",\"title\":\"RegisterForm_title__9qx8U\",\"registerBtn\":\"RegisterForm_registerBtn__1AvuH\",\"registerInput\":\"RegisterForm_registerInput__0IZq2\",\"nameForm\":\"RegisterForm_nameForm__03s36\",\"mailForm\":\"RegisterForm_mailForm__nbkNL\",\"passwordForm\":\"RegisterForm_passwordForm__zkGgp\"};","import { initialState } from \"./initialstate\";\nimport useForm from \"hooks/useForm\";\nimport styles from \"./RegisterForm.module.css\"\n\nconst RegisterForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ initialState, onSubmit });\n\n    const { name, email, password } = state;\n\n    return (\n        <div className={styles.RegisterForm}>\n            <form className={styles.form} action=\"\" onSubmit={handleSubmit}>\n                <h2 className={styles.title}>Register</h2>\n                <div className={styles.wrapForm}>\n            <div className={styles.nameForm}>\n                <label className={styles.label} htmlFor=\"\">Name</label>\n                <input className={styles.registerInput} value={name} name=\"name\" onChange={handleChange} type=\"text\" placeholder=\"name user\" required />\n            </div>\n            <div className={styles.mailForm}>\n                <label className={styles.label} htmlFor=\"\">Email</label>\n                <input className={styles.registerInput} value={email} name=\"email\" onChange={handleChange} type=\"email\" placeholder=\"email\" required />\n            </div>\n            <div className={styles.passwordForm}>\n                <label className={styles.label} htmlFor=\"\">Password</label>\n                <input className={styles.registerInput} value={password} name=\"password\" onChange={handleChange} type=\"password\" placeholder=\"password\" required />\n            </div>\n                <button className={styles.registerBtn} type=\"submit\">Register</button>    \n                </div>\n            </form>\n            </div>\n    )\n};\n\nexport default RegisterForm;","import RegisterForm from \"Modules/RegisterForm/RegisterForm\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { signup } from \"Redux/auth/auth-operations\";\nimport { getAuthError } from \"Redux/auth/auth-selectors\";\nimport useAuth from \"hooks/useAuth\";\n\n\nconst RegisterPage = () => {\n    const dispatch = useDispatch();\n    const { status } = useSelector(getAuthError);\n    const isLogin = useAuth();\n\n    const onRegister = (data) => {\n        dispatch(signup(data));\n    };\n\n    if (isLogin) {\n        return <Navigate to=\"/contacts\"/>\n    }\n\n    return (\n        <div>\n            <RegisterForm onSubmit={onRegister} />\n            {status && <p>Error</p>}\n        </div>\n    )\n};\n\nexport default RegisterPage;","import { useState } from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = (type === \"checkbox\") ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState})\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["initialState","name","email","password","onSubmit","useForm","state","handleChange","handleSubmit","className","styles","action","htmlFor","value","onChange","type","placeholder","required","dispatch","useDispatch","status","useSelector","getAuthError","useAuth","to","data","signup","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}